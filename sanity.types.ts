/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type ProductAsset = {
  _id: string;
  _type: "productAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productType";
  };
  assetName?: string;
  assetKey?: string;
  fileSize?: number;
  fileType?: string;
  uploadedAt?: string;
  version?: string;
};

export type SalesType = {
  _id: string;
  _type: "salesType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
};

export type OrderType = {
  _id: string;
  _type: "orderType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderId?: string;
  paymentId?: string;
  signature?: string;
  clerkUserId?: string;
  name?: string;
  email?: string;
  products?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "productType";
    };
    quantity?: number;
    _key: string;
  }>;
  totalAmount?: number;
  currency?: string;
  discountAmount?: number;
  couponCode?: string;
  status?: "pending" | "paid" | "shipped" | "delivered" | "cancelled";
  orderDate?: string;
};

export type ProductCategory = {
  _id: string;
  _type: "productCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type ProductType = {
  _id: string;
  _type: "productType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  productCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productCategory";
  }>;
  stock?: number;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  seoTitle?: string;
  seoDescription?: string;
  seoKeywords?: string;
  orderRank?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | ProductAsset | SalesType | OrderType | ProductCategory | ProductType | Post | Author | Category | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/order/getMyOrders.ts
// Variable: MY_ORDERS_QUERY
// Query: *[      _type == "orderType"      && clerkUserId == $userId    ] | order(orderDate desc) {      ...,      products[]{        ...,        product->      }    }
export type MY_ORDERS_QUERYResult = Array<{
  _id: string;
  _type: "orderType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderId?: string;
  paymentId?: string;
  signature?: string;
  clerkUserId?: string;
  name?: string;
  email?: string;
  products: Array<{
    product: {
      _id: string;
      _type: "productType";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      description?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }>;
      price?: number;
      productCategories?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "productCategory";
      }>;
      stock?: number;
    } | null;
    quantity?: number;
    _key: string;
  }> | null;
  totalAmount?: number;
  currency?: string;
  discountAmount?: number;
  couponCode?: string;
  status?: "cancelled" | "delivered" | "paid" | "pending" | "shipped";
  orderDate?: string;
}>;

// Source: ./src/sanity/lib/order/getOrderAssets.ts
// Variable: ORDER_ASSETS_QUERY
// Query: *[      _type == "productAsset"       && product._ref in *[        _type == "orderType"         && orderId == $orderId         && clerkUserId == $userId      ].products[].product._ref    ] {      _id,      assetName,      version    }
export type ORDER_ASSETS_QUERYResult = Array<{
  _id: string;
  assetName: string | null;
  version: string | null;
}>;

// Source: ./src/sanity/lib/order/getOrderDetailsById.ts
// Variable: ORDER_BY_ID_QUERY
// Query: *[      _type == "orderType"      && orderId == $orderId    ][0]{      ...,      products[]{        quantity,        product->{          name,          slug,          image,          price        }      }    }
export type ORDER_BY_ID_QUERYResult = {
  _id: string;
  _type: "orderType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderId?: string;
  paymentId?: string;
  signature?: string;
  clerkUserId?: string;
  name?: string;
  email?: string;
  products: Array<{
    quantity: number | null;
    product: {
      name: string | null;
      slug: Slug | null;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      price: number | null;
    } | null;
  }> | null;
  totalAmount?: number;
  currency?: string;
  discountAmount?: number;
  couponCode?: string;
  status?: "cancelled" | "delivered" | "paid" | "pending" | "shipped";
  orderDate?: string;
} | null;

// Source: ./src/sanity/lib/products/getAllProductCatgories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: * [    _type == "productCategory"    ] | order(name asc)
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "productCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
}>;

// Source: ./src/sanity/lib/products/getAllProducts.ts
// Variable: ALL_PRODUCTS_QUERY
// Query: * [    _type == "productType"    ] | order(name asc)
export type ALL_PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "productType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  productCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productCategory";
  }>;
  stock?: number;
}>;

// Source: ./src/sanity/lib/products/getProductByCategory.ts
// Variable: PRODUCTS_BY_CATEGORY_QUERY
// Query: *[      _type == "productType"      && references(*[type == "productCategory" && slug.current == $categorySlug]._id)    ] | order(name asc)
export type PRODUCTS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  _type: "productType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  productCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productCategory";
  }>;
  stock?: number;
}>;

// Source: ./src/sanity/lib/products/getProductBySlug.ts
// Variable: PRODUCT_BY_ID_QUERY
// Query: *[      _type == "productType"      && slug.current == $slug    ] | order(name asc)[0]
export type PRODUCT_BY_ID_QUERYResult = {
  _id: string;
  _type: "productType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  productCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productCategory";
  }>;
  stock?: number;
} | null;

// Source: ./src/sanity/lib/products/searchProductsByName.ts
// Variable: PRODUCT_SEARCH_QUERY
// Query: *[      _type == "productType"      && name match $searchParam    ] | order(name asc)
export type PRODUCT_SEARCH_QUERYResult = Array<{
  _id: string;
  _type: "productType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  productCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productCategory";
  }>;
  stock?: number;
}>;

// Source: ./src/sanity/lib/sales/getActiveSaleByCouponCode.ts
// Variable: ACTIVE_SALE_BY_COUPON_QUERY
// Query: *[      _type == "salesType"      && isActive == true      && couponCode == $couponCode      && validFrom <= now()      && validUntil >= now()    ] | order(validFrom desc)[0]
export type ACTIVE_SALE_BY_COUPON_QUERYResult = {
  _id: string;
  _type: "salesType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
} | null;

// Source: ./src/sanity/lib/slugs/index.ts
// Variable: BLOG_SLUGS_QUERY
// Query: *[_type == "post"] {      "slug": slug.current    }
export type BLOG_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: PRODUCT_SLUGS_QUERY
// Query: *[_type == "productType"] {      "slug": slug.current    }
export type PRODUCT_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: BLOG_CATEGORY_SLUGS_QUERY
// Query: *[_type == "category"] {      "slug": slug.current    }
export type BLOG_CATEGORY_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: PRODUCT_CATEGORY_SLUGS_QUERY
// Query: *[_type == "productCategory"] {      "slug": slug.current    }
export type PRODUCT_CATEGORY_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: BLOG_POSTS_QUERY
// Query: *[_type == "post"] {      title,      "slug": slug.current,      publishedAt,      excerpt,      "authorName": author->name,      "categories": categories[]->title,      "imageUrl": mainImage.asset->url    }
export type BLOG_POSTS_QUERYResult = Array<{
  title: string | null;
  slug: string | null;
  publishedAt: string | null;
  excerpt: null;
  authorName: string | null;
  categories: Array<string | null> | null;
  imageUrl: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[\n      _type == \"orderType\"\n      && clerkUserId == $userId\n    ] | order(orderDate desc) {\n      ...,\n      products[]{\n        ...,\n        product->\n      }\n    }\n  ": MY_ORDERS_QUERYResult;
    "\n    *[\n      _type == \"productAsset\" \n      && product._ref in *[\n        _type == \"orderType\" \n        && orderId == $orderId \n        && clerkUserId == $userId\n      ].products[].product._ref\n    ] {\n      _id,\n      assetName,\n      version\n    }\n  ": ORDER_ASSETS_QUERYResult;
    "\n    *[\n      _type == \"orderType\"\n      && orderId == $orderId\n    ][0]{\n      ...,\n      products[]{\n        quantity,\n        product->{\n          name,\n          slug,\n          image,\n          price\n        }\n      }\n    }\n  ": ORDER_BY_ID_QUERYResult;
    "\n    * [\n    _type == \"productCategory\"\n    ] | order(name asc)\n    ": ALL_CATEGORIES_QUERYResult;
    "\n    * [\n    _type == \"productType\"\n    ] | order(name asc)\n    ": ALL_PRODUCTS_QUERYResult;
    "\n    *[\n      _type == \"productType\"\n      && references(*[type == \"productCategory\" && slug.current == $categorySlug]._id)\n    ] | order(name asc)\n  ": PRODUCTS_BY_CATEGORY_QUERYResult;
    "\n    *[\n      _type == \"productType\"\n      && slug.current == $slug\n    ] | order(name asc)[0]\n  ": PRODUCT_BY_ID_QUERYResult;
    "\n    *[\n      _type == \"productType\"\n      && name match $searchParam\n    ] | order(name asc)\n  ": PRODUCT_SEARCH_QUERYResult;
    "\n    *[\n      _type == \"salesType\"\n      && isActive == true\n      && couponCode == $couponCode\n      && validFrom <= now()\n      && validUntil >= now()\n    ] | order(validFrom desc)[0]\n  ": ACTIVE_SALE_BY_COUPON_QUERYResult;
    "\n    *[_type == \"post\"] {\n      \"slug\": slug.current\n    }\n  ": BLOG_SLUGS_QUERYResult;
    "\n    *[_type == \"productType\"] {\n      \"slug\": slug.current\n    }\n  ": PRODUCT_SLUGS_QUERYResult;
    "\n    *[_type == \"category\"] {\n      \"slug\": slug.current\n    }\n  ": BLOG_CATEGORY_SLUGS_QUERYResult;
    "\n    *[_type == \"productCategory\"] {\n      \"slug\": slug.current\n    }\n  ": PRODUCT_CATEGORY_SLUGS_QUERYResult;
    "\n    *[_type == \"post\"] {\n      title,\n      \"slug\": slug.current,\n      publishedAt,\n      excerpt,\n      \"authorName\": author->name,\n      \"categories\": categories[]->title,\n      \"imageUrl\": mainImage.asset->url\n    }\n  ": BLOG_POSTS_QUERYResult;
  }
}
