---
import TableOfContent from "@/components/blog/table-of-content.astro";
import PortableText from "@/components/sanity/portable-text.astro";
import { parseOutline, urlForImage } from "@/helpers/sanity";
import { getAllBlogs } from "@/helpers/server-actions";
import Layout from "@/layouts/Layout.astro";
import { Image } from "astro:assets";
import ShareLinks from "@/components/share-links.astro";
import type { BlogPosting, WithContext } from "schema-dts";
import socials from "@/constants/socials";
import { toPlainText } from "@portabletext/toolkit";
import { estimateReadingTime } from "@/helpers";

declare global {
  interface Window {
    adsbygoogle: unknown[];
  }
}

export async function getStaticPaths() {
  const posts = await getAllBlogs();

  return posts.map((post) => {
    return {
      params: { blog: post.slug.current },
      props: { post }
    };
  });
}

const { post } = Astro.props;

const filteredRelated = post.related.filter(
  (related) => related.slug.current !== post.slug.current
);
const hasRelatedPosts = filteredRelated.length > 0;

const blocks = parseOutline(post.body);
const content = toPlainText(post.body);
const readingTime = estimateReadingTime(content);

const blogSchema: WithContext<BlogPosting> = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": `https://r44j.dev/blog/${post.slug.current}`
  },
  headline: post.title,
  description: post.seoDescription,
  image: urlForImage(post.mainImage.asset).url(),
  keywords: post.seoKeywords,
  author: {
    "@type": "Person",
    name: "Raj Vadeghar",
    url: "https://r44j.dev",
    image: "https://r44j.dev/me.png",
    sameAs: [socials.twitter.url, socials.github.url, socials.linkedin.url]
  },
  publisher: {
    "@type": "Organization",
    name: "R44j Vadeghar",
    logo: {
      "@type": "ImageObject",
      url: "https://r44j.dev/icon-256x256.png"
    }
  },
  datePublished: new Date(post.publishedAt).toISOString(),
  dateModified: new Date(post._updatedAt).toISOString(),
  wordCount: content.split(/\s+/).length,
  timeRequired: `PT${Math.ceil(readingTime)}M`
};
---

<Layout
  seo={{
    title: post.seoTitle,
    description: post.seoDescription,
    openGraph: {
      article: {
        authors: ["Raj Vadeghar"],
        publishedTime: post.publishedAt,
        modifiedTime: post._updatedAt,
        tags: post.categories.map((c) => c.title),
        section: post.categories[0]?.title || "Technology"
      },
      basic: {
        image: urlForImage(post.mainImage.asset).url(),
        title: post.seoTitle,
        type: "article",
        url: `https://r44j.dev/blog/${post.slug.current}`
      },
      image: {
        url: urlForImage(post.mainImage.asset).url(),
        alt: post.title,
        width: 1200,
        height: 630
      },
      optional: {
        description: post.seoDescription,
        siteName: "R44j Vadeghar Blog",
        locale: "en_US"
      }
    }
  }}
  schema={blogSchema}
  keywords={post.seoKeywords}
>
  <article>
    <div class="relative w-full bg-black">
      <div
        class="mx-auto w-full max-w-screen-xl p-6 px-4 py-12 sm:px-6 lg:px-8"
      >
        <div class="pointer-events-auto -z-50 flex gap-8 py-22">
          <Image
            transition:name={post.slug.current}
            src={urlForImage(post.mainImage.asset).format("webp").url()}
            alt={post.title}
            class="pointer-events-none z-10 h-fit w-1/2 rounded-2xl object-cover"
            width="400"
            height="250"
          />
          <div class="flex flex-col justify-between gap-3">
            <div class="flex flex-col gap-3">
              <h1
                transition:name={post.title}
                class="pb-4 text-xl font-bold text-balance text-white sm:text-5xl"
              >
                {post.title}
              </h1>
              <h2 transition:name={post.seoDescription}>
                {post.seoDescription}
              </h2>
              <div class="mt-2 flex flex-wrap gap-2">
                {
                  post.categories.map((category) => (
                    <span
                      transition:name={category._id}
                      class="rounded-full bg-zinc-800/50 px-3 py-1 text-xs text-zinc-300"
                    >
                      {category.title}
                    </span>
                  ))
                }
              </div>
            </div>

            <p>
              Last updated on: {
                new Date(post.publishedAt).toLocaleDateString("en-us", {
                  weekday: "long",
                  year: "numeric",
                  month: "short"
                })
              }
            </p>
          </div>
        </div>
        <div class="flex w-full flex-col gap-20 md:flex-row-reverse">
          <div class="top-14 flex h-fit flex-col gap-28 md:sticky">
            <div class="flex flex-col gap-5">
              <h5 class="text-2xl text-white/80">Table of contents</h5>
              <TableOfContent blocks={blocks} />
              {
                hasRelatedPosts && (
                  <li class="list-none transition-all hover:text-white/90">
                    <a href="#related-posts">Related posts</a>
                  </li>
                )
              }
              <ShareLinks url={`https://r44j.dev/blog/${post.slug.current}`} />
            </div>
            <amp-ad
              width="100vw"
              height="320"
              type="adsense"
              data-ad-client="ca-pub-8750631183642200"
              data-ad-slot="6587918713"
              data-auto-format="rspv"
              data-full-width=""
            >
              <div></div>
            </amp-ad>
          </div>

          <div class="mx-auto w-full max-w-3xl">
            <div
              class="prose lg:prose-lg prose-headings:text-white prose-p:text-white/70 prose-a:text-blue-600 hover:prose-a:text-blue-500 prose-blockquote:text-white/50 prose-strong:text-white w-full"
            >
              <PortableText portableText={post.body} />
            </div>

            <amp-ad
              width="100vw"
              height="320"
              type="adsense"
              data-ad-client="ca-pub-8750631183642200"
              data-ad-slot="6587918713"
              data-auto-format="rspv"
              data-full-width=""
            >
              <div></div>
            </amp-ad>
            <script
              async
              src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8750631183642200"
              crossorigin="anonymous"></script>
            <!-- Test -->
            <ins
              class="adsbygoogle"
              style="display:block"
              data-ad-client="ca-pub-8750631183642200"
              data-ad-slot="6587918713"
              data-ad-format="auto"
              data-full-width-responsive="true"></ins>
            <script>
              (window.adsbygoogle = window.adsbygoogle || []).push({});
            </script>
            {
              hasRelatedPosts && (
                <div
                  id="related-posts"
                  class="mt-28 flex flex-col gap-5 border-t border-gray-800 pt-28"
                >
                  <h5 class="text-2xl text-white/80">Related posts</h5>

                  <div class="grid grid-cols-1 gap-5 sm:grid-cols-2">
                    {filteredRelated.slice(0, 4).map((related) => (
                      <a
                        href={related.slug.current}
                        class="w-fit max-w-sm rounded-3xl bg-gradient-to-b from-blue-800 to-purple-800 p-px"
                      >
                        <div class="flex flex-col gap-3 rounded-[calc(1.5rem-1px)] bg-black p-2">
                          <Image
                            transition:name={related.slug.current}
                            src={urlForImage(related.mainImage.asset).url()}
                            alt={related.title}
                            class="aspect-video rounded-[calc(1.5rem-2px)] object-cover"
                            width="400"
                            height="250"
                          />
                          <p class="p-2">{related.title}</p>
                        </div>
                      </a>
                    ))}
                  </div>
                </div>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </article>
</Layout>

<script define:vars={{ blocks }}>
  function getAllKeys(headings) {
    const result = [];

    headings.forEach((heading) => {
      result.push(heading._key);
      if (heading.subheadings.length > 0) {
        result.push(...getAllKeys(heading.subheadings));
      }
    });

    return result;
  }

  const keys = getAllKeys(blocks);

  function setDefaultColorOnAllKeys(keys) {
    keys.forEach((key) => {
      const element = document.getElementById(`toc-${key}`);
      element.style.color = "rgba(255,255,255,0.5)";
    });
  }

  const handleIntersection = (entries) => {
    entries.forEach((entry) => {
      const key = entry.target.id.replace(/^toc-/, "");
      const targetElement = document.getElementById(`toc-${key}`);

      if (entry.isIntersecting && targetElement) {
        setDefaultColorOnAllKeys(keys);
        targetElement.style.color = "white";
      }
    });
  };

  const setupIntersectionObserver = (keys) => {
    const observer = new IntersectionObserver(handleIntersection, {
      threshold: 0.5
    });

    keys.forEach((key) => {
      const element = document.getElementById(`${key}`);
      if (element) {
        observer.observe(element);
      }
    });
  };

  setupIntersectionObserver(keys);
</script>
